generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  firstName     String
  lastName      String
  password      String
  email         String         @unique
  emailVerified DateTime?
  phone         String
  image         String?
  accounts      Account[]
  sessions      Session[]
  UserProgress  UserProgress[]
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Module {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  topics      Topic[]
}

model Topic {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  moduleId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  contents    Content[]
  module      Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model Content {
  id                 String          @id @default(cuid())
  title              String
  description        String
  brief              String
  photos             String[] // Array of image URLs
  complexityAnalysis String?
  applications       String[]
  advantages         String[]
  disadvantages      String[]
  faq                FaqQuestion[]
  vivaQuestions      VivaQuestion[]
  videos             String[]
  testCases          String[]
  topicId            String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  topic              Topic           @relation(fields: [topicId], references: [id], onDelete: Cascade)
  working            Working?
  implementation     Implementation?
  illustration       Illustration?
  UserProgress       UserProgress[]
}

model FaqQuestion {
  id        String  @id @default(cuid())
  question  String
  answer    String
  contentId String
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model VivaQuestion {
  id        String  @id @default(cuid())
  question  String
  answer    String
  contentId String
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model Working {
  id          String @id @default(cuid())
  contentId   String @unique
  explanation String

  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model Illustration {
  id          String   @id @default(cuid())
  contentId   String   @unique
  summary     String?
  tips        String[]
  images      String[]
  explanation String

  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model Implementation {
  id        String @id @default(cuid())
  contentId String @unique
  intuition String
  approach  String
  code      Json

  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
}


model UserProgress {
  id          String    @id @default(cuid())
  userId      String
  contentId   String
  isCompleted Boolean   @default(false)
  completedAt DateTime?

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
}